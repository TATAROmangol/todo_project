services:
  nginx:
    image: nginx:1.25
    depends_on:
      auth: 
        condition: service_started
      todo_api:
        condition: service_started
    ports:
      - "9000:9000"  
      - "80:80"      
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/video:/etc/nginx/video

  todo_api:
    container_name: todo_api
    depends_on:
      postgres:
        condition: service_healthy
    build: 
      context: ./todo
      dockerfile: Dockerfile
    environment:
      NGINX_HOST: nginx
      NGINX_PORT: ${NGINX_GRPC_PORT}
      HTTP_HOST: ${HTTP_HOST_TODO}
      HTTP_PORT: ${HTTP_PORT_TODO}
      JWT_KEY: ${JWT_KEY}
      PG_HOST: postgres
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB_NAME: ${PG_DB_NAME}
      PG_SSL: ${PG_SSL}
      MIGRATE_HOST: ${MIGRATE_HOST}
      MIGRATE_USER: ${MIGRATE_USER}
      MIGRATE_PASSWORD: ${MIGRATE_PASSWORD}
      MIGRATE_DB: ${MIGRATE_DB}
      MIGRATE_SSL: ${MIGRATE_SSL}
      MIGRATE_SCHEMA: ${MIGRATE_SCHEMA_TODO}
      
    expose:
      - ${HTTP_PORT_TODO}

  auth:
    container_name: auth
    depends_on:
      postgres:
        condition: service_healthy
    build: 
      context: ./auth
      dockerfile: Dockerfile
    environment:
      HTTP_HOST: ${HTTP_HOST_AUTH}
      HTTP_PORT: ${HTTP_PORT_AUTH}
      GRPC_HOST: ${GRPC_HOST}
      GRPC_PORT: ${GRPC_PORT}
      JWT_KEY: ${JWT_KEY}
      PG_HOST: postgres
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB_NAME: ${PG_DB_NAME}
      PG_SSL: ${PG_SSL}
      MIGRATE_HOST: ${MIGRATE_HOST}
      MIGRATE_USER: ${MIGRATE_USER}
      MIGRATE_PASSWORD: ${MIGRATE_PASSWORD}
      MIGRATE_DB: ${MIGRATE_DB}
      MIGRATE_SSL: ${MIGRATE_SSL}
      MIGRATE_SCHEMA: ${MIGRATE_SCHEMA_AUTH}
    expose:
      - ${HTTP_PORT_AUTH}
      - ${GRPC_PORT}
    
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD:  ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB_NAME}
      PGDATA: ${PG_DATA}
    ports:
      - ${OUT_PG_PORT}:${PG_PORT}
    volumes:
      - ${PG_VOLUME}:${PG_DATA}
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

volumes:
  pgdata:
    driver: local